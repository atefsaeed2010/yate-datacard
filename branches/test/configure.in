# Process this file with autoconf to produce a configure script.
AC_INIT(Yate-datacard, 0.0.1)
AC_CONFIG_SRCDIR([README])
AC_PREREQ(2.52)

PACKAGE_RELEASE="1"

PACKAGE_VERSION_MAJOR="${PACKAGE_VERSION%%.*}"
PACKAGE_VERSION_MINOR="${PACKAGE_VERSION#*.}"
PACKAGE_VERSION_MINOR="${PACKAGE_VERSION_MINOR%.*}"
PACKAGE_VERSION_BUILD="${PACKAGE_VERSION##*.}"
PACKAGE_VERSION_RELEASE="$((0+${PACKAGE_RELEASE}))"
AC_SUBST(PACKAGE_VERSION_MAJOR)
AC_SUBST(PACKAGE_VERSION_MINOR)
AC_SUBST(PACKAGE_VERSION_BUILD)
AC_SUBST(PACKAGE_VERSION_RELEASE)
AC_SUBST(PACKAGE_RELEASE)

# We may need the host OS type but avoid the overhead of AC_CANONICAL_SYSTEM
AC_MSG_CHECKING([for local operating system type])
uname_os=`uname -s`
test -x "$uname_os" && uname_os=Unknown
AC_MSG_RESULT([$uname_os])


# Check if we should look for alternate library names 
AC_ARG_WITH(archlib,AC_HELP_STRING([--with-archlib=NAME],[use NAME as library directory name]),[ac_cv_use_archlib=$withval])
AC_MSG_CHECKING([for libraries directory name])
archname=`dpkg-architecture -qDEB_HOST_MULTIARCH 2>/dev/null`
test -z "$archname" && archname=`uname -m 2>/dev/null`
test -z "$archname" && archname=`arch -k 2>/dev/null`
test -z "$archname" && archname=`arch 2>/dev/null`
ARCHLIB="lib"
case "x$archname" in
    x*-*-*)
	ARCHLIB="lib/$archname"
	;;
    x*x86_64*)
        ARCHLIB=lib64
        ;;
esac
case "x$ac_cv_use_archlib" in
    x|xyes)
        ;;
    xno)
        ARCHLIB="lib"
        ;;
    *)
        ARCHLIB="$ac_cv_use_archlib"
esac
test -d "/usr/$ARCHLIB" || ARCHLIB="lib"
AC_MSG_RESULT([$ARCHLIB])
AC_SUBST(ARCHLIB)

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_AWK

# Check for Yate (required)
YATE_VER=""
YATE_INC=""
YATE_LIB=""
YATE_STR=""
YATE_MOD=""
YATE_SCR=""
YATE_SKN=""
YATE_CFG=""
yc="yate-config"

AC_ARG_WITH(yate,AC_HELP_STRING([--with-yate=DIR],[use Yate from DIR]),[ac_cv_use_yate=$withval],[ac_cv_use_yate=yes])
if [[ "x$ac_cv_use_yate" = "xno" ]]; then
    YATE_VER="no"
else
if [[ "x$ac_cv_use_yate" != "xyes" ]]; then
    for i in "$ac_cv_use_yate" "$ac_cv_use_yate/bin"; do
	myc="$i"
	test -f "$myc/$yc" && break
    done
    if [[ -f "$myc/$yc" ]]; then
	yc="$myc/$yc"
    fi
    
    for i in "$ac_cv_use_yate" "$ac_cv_use_yate/lib"; do
	mylib="$i"
	test -f "$mylib/libyate.so" && break
    done
    if [[ -f "$mylib/libyate.so" ]]; then
	YATE_LIB="-L$mylib "
    fi
fi
AC_MSG_CHECKING([for Yate using $yc])
YATE_VER=`"$yc" --version 2>/dev/null`
YATE_INC=`"$yc" --c-all 2>/dev/null`
YATE_LIB="$YATE_LIB"`"$yc" --ld-nostrip 2>/dev/null`
YATE_STR=`"$yc" --ld-strip 2>/dev/null`
YATE_MOD=`"$yc" --modules 2>/dev/null`
YATE_SCR=`"$yc" --scripts 2>/dev/null`
YATE_SKN=`"$yc" --skins 2>/dev/null`
YATE_CFG=`"$yc" --config 2>/dev/null`
if [[ "x$YATE_VER" = "x" ]]; then
    YATE_VER="no"
fi
AC_MSG_RESULT([$YATE_VER])
if [[ "x$YATE_VER" = "xno" ]]; then
    AC_ERROR([Could not find Yate])
fi
fi
AC_SUBST(YATE_VER)
AC_SUBST(YATE_INC)
AC_SUBST(YATE_LIB)
AC_SUBST(YATE_STR)
AC_SUBST(YATE_MOD)
AC_SUBST(YATE_SCR)
AC_SUBST(YATE_SKN)
AC_SUBST(YATE_CFG)

INSTALL_L=""
AC_ARG_ENABLE(lib-exec,AC_HELP_STRING([--enable-lib-exec],[Executable libraries and modules (default: auto)]),want_lib_exec=$enableval,want_lib_exec=auto)
case "x$want_lib_exec" in
    xyes)
	;;
    xno)
	INSTALL_L="-m 0644"
	;;
    xauto)
	AC_MSG_CHECKING([if shared libraries should be executable])
	if stat -L "/usr/$ARCHLIB/libm.so" 2>/dev/null | grep -q '(0644/'; then
	    want_lib_exec=no
	    INSTALL_L="-m 0644"
	else
	    want_lib_exec=yes
	fi
	AC_MSG_RESULT([$want_lib_exec])
	;;
    *)
	AC_ERROR([Invalid argument passed to --enable-lib-exec])
	;;
esac
AC_SUBST(INSTALL_L)

AC_CONFIG_FILES([yate-module.spec
                 Makefile])
CONFIGURE_FILES=`echo "$ac_config_files config.status config.log" | sed 's/yate-module\.spec *//'`
AC_SUBST(CONFIGURE_FILES)
AC_OUTPUT
